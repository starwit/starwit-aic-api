# coding: utf-8

"""
    AI Cockpit Decisions

    This API is part of project AI cockpit.   For more details see: TODO 

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ActionTypeEntity(BaseModel):
    """
    ActionTypeEntity
    """ # noqa: E501
    id: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    execution_policy: Optional[StrictStr] = Field(default=None, alias="executionPolicy")
    action: Optional[List[ActionEntity]] = None
    decision_type: Optional[List[DecisionTypeEntity]] = Field(default=None, alias="decisionType")
    __properties: ClassVar[List[str]] = ["id", "name", "description", "executionPolicy", "action", "decisionType"]

    @field_validator('execution_policy')
    def execution_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MANUAL', 'WITHCHECK', 'AUTOMATIC']):
            raise ValueError("must be one of enum values ('MANUAL', 'WITHCHECK', 'AUTOMATIC')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActionTypeEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in action (list)
        _items = []
        if self.action:
            for _item_action in self.action:
                if _item_action:
                    _items.append(_item_action.to_dict())
            _dict['action'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in decision_type (list)
        _items = []
        if self.decision_type:
            for _item_decision_type in self.decision_type:
                if _item_decision_type:
                    _items.append(_item_decision_type.to_dict())
            _dict['decisionType'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActionTypeEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "executionPolicy": obj.get("executionPolicy"),
            "action": [ActionEntity.from_dict(_item) for _item in obj["action"]] if obj.get("action") is not None else None,
            "decisionType": [DecisionTypeEntity.from_dict(_item) for _item in obj["decisionType"]] if obj.get("decisionType") is not None else None
        })
        return _obj

from starwit_aic_api.models.action_entity import ActionEntity
from starwit_aic_api.models.decision_type_entity import DecisionTypeEntity
# TODO: Rewrite to not use raise_errors
ActionTypeEntity.model_rebuild(raise_errors=False)

