# coding: utf-8

"""
    AI Cockpit Decisions

    This API is part of project AI cockpit.   For more details see: https://www.kicockpit.eu/ 

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Decision(BaseModel):
    """
    Decision
    """ # noqa: E501
    id: Optional[StrictInt] = None
    acquisition_time: Optional[datetime] = Field(default=None, description="Timestamp when the decision was made", alias="acquisitionTime")
    media_url: Optional[StrictStr] = Field(default=None, description="Media the decision was based on", alias="mediaUrl")
    action_visualization_url: Optional[StrictStr] = Field(default=None, description="Media the decision was based on", alias="actionVisualizationUrl")
    camera_latitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cameraLatitude")
    camera_longitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cameraLongitude")
    state: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    module: Optional[Module] = None
    decision_type: Optional[DecisionType] = Field(default=None, alias="decisionType")
    actions: Optional[List[Action]] = None
    __properties: ClassVar[List[str]] = ["id", "acquisitionTime", "mediaUrl", "actionVisualizationUrl", "cameraLatitude", "cameraLongitude", "state", "description", "module", "decisionType", "actions"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NEW', 'ACCEPTED', 'REJECTED']):
            raise ValueError("must be one of enum values ('NEW', 'ACCEPTED', 'REJECTED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Decision from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of module
        if self.module:
            _dict['module'] = self.module.to_dict()
        # override the default output from pydantic by calling `to_dict()` of decision_type
        if self.decision_type:
            _dict['decisionType'] = self.decision_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in actions (list)
        _items = []
        if self.actions:
            for _item_actions in self.actions:
                if _item_actions:
                    _items.append(_item_actions.to_dict())
            _dict['actions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Decision from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "acquisitionTime": obj.get("acquisitionTime"),
            "mediaUrl": obj.get("mediaUrl"),
            "actionVisualizationUrl": obj.get("actionVisualizationUrl"),
            "cameraLatitude": obj.get("cameraLatitude"),
            "cameraLongitude": obj.get("cameraLongitude"),
            "state": obj.get("state"),
            "description": obj.get("description"),
            "module": Module.from_dict(obj["module"]) if obj.get("module") is not None else None,
            "decisionType": DecisionType.from_dict(obj["decisionType"]) if obj.get("decisionType") is not None else None,
            "actions": [Action.from_dict(_item) for _item in obj["actions"]] if obj.get("actions") is not None else None
        })
        return _obj

from starwit_aic_api.models.action import Action
from starwit_aic_api.models.decision_type import DecisionType
from starwit_aic_api.models.module import Module
# TODO: Rewrite to not use raise_errors
Decision.model_rebuild(raise_errors=False)

